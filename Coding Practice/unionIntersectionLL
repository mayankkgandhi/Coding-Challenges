class Node():

    def __init__(self,data):
        self.data = data
        self.next= None

class linkedList():

    def __init__(self):
        self.head = None

    def push(self,new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node

    def printList(self):
        temp = self.head
        while(temp):
            print  temp.data
            temp = temp.next

    def interList(self,head1,head2):
        m= dict()
        while(head1):
            # print head1.data
            # print m.items()
            if head1.data in m.keys():
                # print "Duplicate"
                m[head1.data] += 1
            else:
                m[head1.data] = 1
            head1=  head1.next
        while(head2):
            if head2.data in m.keys():
                inter.push(head2.data)
                head2= head2.next
            else:
                head2= head2.next

    def uniList(self,head1,head2):
        m = dict()
        while(head1):
            # print head1.data
            # print m.items()
            if head1.data in m.keys():
                # print "Duplicate"
                m[head1.data] += 1
            else:
                m[head1.data] = 1
                uni.push(head1.data)
            head1=  head1.next
        # print m
        while(head2):
            if head2.data in m.keys():
                head2= head2.next

            else:
                uni.push(head2.data)
                head2= head2.next

llist=linkedList()
print "LIST 1"
llist.push(5)
llist.push(4)
llist.push(1)
llist.push(2)
llist.push(1)

llist.printList()
llist2=linkedList()
print "LIST 2"
llist2.push(6)
llist2.push(2)
llist2.push(1)
llist2.push(3)
llist2.printList()

inter=linkedList()
uni=linkedList()

inter.interList(llist.head, llist2.head)
print "INTERSECTION LIST"
inter.printList()


uni.uniList(llist.head, llist2.head)
print "UNION LIST"
uni.printList()
